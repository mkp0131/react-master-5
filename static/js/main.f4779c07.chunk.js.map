{"version":3,"sources":["atoms.ts","components/Card.tsx","components/Board.tsx","components/Form.tsx","App.tsx","index.tsx"],"names":["ToDoCategory","Card","toDo","id","index","draggableId","provided","isDragging","className","ref","innerRef","dragHandleProps","draggableProps","React","memo","Board","boardId","toDos","droppableId","isDraggingOver","draggingFromThisWith","toUpperCase","droppableProps","map","key","placeholder","toDoState","atom","default","doing","done","todoCategoryState","TO_DO","textareaResize","event","currentTarget","style","height","scrollHeight","FormElement","styled","form","Form","useRecoilState","toDoCategory","setToDoCategory","setToDo","useForm","register","handleSubmit","setValue","formState","errors","onSubmit","data","oldObj","copyArr","unshift","Date","now","onKeyUp","required","value","onInput","DOING","DONE","type","App","setToDos","console","log","onDragEnd","destination","source","allBoard","srcBoard","srcIndex","destBoard","destIndex","copyToDos","spliceTodo","splice","copySrcBoard","copyDestBoard","Object","keys","toDoId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f4779c07.chunk.js","sourcesContent":["import { atom } from 'recoil';\n\nexport interface IToDo {\n  id: number;\n  toDo: string;\n}\n\nexport enum ToDoCategory {\n  'TO_DO' = 'to do',\n  'DOING' = 'doing',\n  'DONE' = 'done',\n}\n\nexport interface IToDoState {\n  [key: string]: IToDo[];\n}\n\nexport const toDoState = atom<IToDoState>({\n  key: 'toDo',\n  default: {\n    'to do': [],\n    doing: [],\n    done: [],\n  },\n});\n\nexport const todoCategoryState = atom<ToDoCategory>({\n  key: 'toDoCategory',\n  default: ToDoCategory.TO_DO,\n});\n","import { IToDo } from 'atoms';\nimport React from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\n\ninterface ICardProps extends IToDo {\n  index: number;\n}\n\nconst Card = ({ toDo, id, index }: ICardProps) => {\n  return (\n    <Draggable draggableId={id + ''} index={index}>\n      {(provided, { isDragging }) => {\n        return (\n          <li\n            className={`dnd-board__item ${isDragging ? 'drag' : ''}`}\n            ref={provided.innerRef}\n            {...provided.dragHandleProps}\n            {...provided.draggableProps}\n          >\n            {toDo}\n          </li>\n        );\n      }}\n    </Draggable>\n  );\n};\n\nexport default React.memo(Card);\n","import Card from 'components/Card';\nimport { Droppable } from 'react-beautiful-dnd';\nimport { IToDo } from 'atoms';\n\ninterface IBoardProps {\n  boardId: string;\n  toDos: IToDo[];\n}\n\nconst Board = ({ boardId, toDos }: IBoardProps) => {\n  return (\n    <Droppable droppableId={boardId}>\n      {(provided, { isDraggingOver, draggingFromThisWith }) => {\n        return (\n          <div\n            className={`dnd-board ${\n              isDraggingOver\n                ? 'drag_over'\n                : draggingFromThisWith\n                ? 'drag_leave'\n                : ''\n            }`}\n          >\n            <h2>{boardId.toUpperCase()}</h2>\n            <ul {...provided.droppableProps} ref={provided.innerRef}>\n              {toDos.map((toDo, index) => (\n                <Card {...toDo} key={toDo.id} index={index} />\n              ))}\n              {provided.placeholder}\n            </ul>\n          </div>\n        );\n      }}\n    </Droppable>\n  );\n};\n\nexport default Board;\n","import { ToDoCategory, todoCategoryState, toDoState } from 'atoms';\nimport { useForm } from 'react-hook-form';\nimport { useRecoilState, useResetRecoilState } from 'recoil';\nimport styled from 'styled-components';\n\n// textarea 높이 조절\nfunction textareaResize(event: React.KeyboardEvent<HTMLTextAreaElement>) {\n  const { currentTarget } = event;\n\n  currentTarget.style.height = 'auto';\n  currentTarget.style.height = 12 + currentTarget.scrollHeight + 'px';\n}\n\nconst FormElement = styled.form`\n  width: 100%;\n  background: var(--box-color);\n  border-radius: 10px;\n  overflow: hidden;\n  border: 1px solid var(--font-color);\n  margin-bottom: 2em;\n  textarea {\n    width: 100%;\n    height: 92px;\n    background: transparent;\n    border: none;\n    resize: none;\n    outline: none;\n    padding: 1em;\n    color: var(--font-color);\n    font-size: 1rem;\n    line-height: 1.5;\n    overflow: hidden;\n  }\n  .util {\n    display: grid;\n    grid-template-columns: 100px auto;\n    gap: 1em;\n    /* justify-content: space-between; */\n    select {\n      font-size: 1rem;\n      padding: 0.5em;\n      background: transparent;\n      border: none;\n      color: var(--font-color);\n      outline: none;\n      cursor: pointer;\n      text-align: center;\n    }\n    button[type='submit'] {\n      font-size: 1rem;\n      padding: 0.5em;\n      background: transparent;\n      border: none;\n      color: var(--font-color);\n      outline: none;\n      cursor: pointer;\n      background: var(--bg-color);\n      border-top-left-radius: 10px;\n      font-weight: 700;\n    }\n  }\n`;\n\ninterface IForm {\n  toDo: string;\n}\n\nconst Form = () => {\n  const [toDoCategory, setToDoCategory] = useRecoilState(todoCategoryState);\n  const [toDo, setToDo] = useRecoilState(toDoState);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n  } = useForm<IForm>();\n\n  const onSubmit = (data: IForm) => {\n    setToDo((oldObj) => {\n      const copyArr = [...oldObj[toDoCategory]];\n      copyArr.unshift({\n        id: Date.now(),\n        toDo: data.toDo,\n      });\n\n      return {\n        ...oldObj,\n        [toDoCategory]: copyArr,\n      };\n    });\n\n    setValue('toDo', '');\n  };\n\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n    const {\n      currentTarget: { value },\n    } = event;\n\n    setToDoCategory(value as ToDoCategory);\n  };\n\n  return (\n    <FormElement onSubmit={handleSubmit(onSubmit)}>\n      <textarea\n        onKeyUp={textareaResize}\n        {...register('toDo', {\n          required: '할일을 적어주세요!',\n        })}\n      ></textarea>\n      <div className=\"util\">\n        <select value={toDoCategory} onInput={onInput}>\n          <option value={ToDoCategory.TO_DO} key={ToDoCategory.TO_DO}>\n            준비\n          </option>\n          <option value={ToDoCategory.DOING} key={ToDoCategory.DOING}>\n            진행\n          </option>\n          <option value={ToDoCategory.DONE} key={ToDoCategory.DONE}>\n            종료\n          </option>\n        </select>\n        <button type=\"submit\">등록</button>\n      </div>\n    </FormElement>\n  );\n};\n\nexport default Form;\n","import Board from 'components/Board';\nimport Form from 'components/Form';\nimport React from 'react';\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\nimport { useRecoilState } from 'recoil';\nimport { IToDoState, toDoState } from './atoms';\n\nfunction App() {\n  const [toDos, setToDos] = useRecoilState<IToDoState>(toDoState);\n  const onDragEnd = ({ draggableId, destination, source }: DropResult) => {\n    if (!destination) return;\n\n    setToDos((allBoard) => {\n      const srcBoard = source.droppableId;\n      const srcIndex = source.index;\n      const destBoard = destination.droppableId;\n      const destIndex = destination.index;\n\n      if (srcBoard === destBoard) {\n        const copyToDos = [...allBoard[srcBoard]];\n\n        const spliceTodo = copyToDos.splice(srcIndex, 1);\n        copyToDos.splice(destIndex, 0, ...spliceTodo);\n\n        return {\n          ...allBoard,\n          [srcBoard]: copyToDos,\n        };\n      } else {\n        const copySrcBoard = [...allBoard[srcBoard]];\n        const copyDestBoard = [...allBoard[destBoard]];\n\n        const spliceTodo = copySrcBoard.splice(srcIndex, 1);\n        copyDestBoard.splice(destIndex, 0, ...spliceTodo);\n\n        return {\n          ...allBoard,\n          [srcBoard]: copySrcBoard,\n          [destBoard]: copyDestBoard,\n        };\n      }\n    });\n  };\n\n  console.log(1);\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"inner\">\n          <h1>React beautiful dnd</h1>\n          <Form />\n          <div className=\"dnd-artboard\">\n            <DragDropContext onDragEnd={onDragEnd}>\n              {Object.keys(toDos).map((toDoId) => {\n                return (\n                  <Board key={toDoId} boardId={toDoId} toDos={toDos[toDoId]} />\n                );\n              })}\n            </DragDropContext>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { RecoilRoot } from 'recoil';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}